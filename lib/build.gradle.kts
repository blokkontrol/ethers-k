/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.7.21"

    // Apply the org.jetbrains.kotlinx.kover Plugin to add support for Kotlin Kover
    id("org.jetbrains.kotlinx.kover") version "0.6.1"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.0.1-jre")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest()
        }
    }
}

kover {
    // true to disable instrumentation and all Kover tasks in this project
    isDisabled.set(false)

    // to change engine, use kotlinx.kover.api.IntellijEngine("xxx") or kotlinx.kover.api.JacocoEngine("xxx")
    engine.set(kotlinx.kover.api.DefaultJacocoEngine)

    // common filters for all default Kover tasks
    filters {
        // common class filter for all default Kover tasks in this project
        classes {
            // class inclusion rules
            includes += "xyz.blokkontrol.*"
            // class exclusion rules
            excludes += listOf("com.example.subpackage.*")
        }

        // common annotation filter for all default Kover tasks in this project
        annotations {
            // exclude declarations marked by specified annotations
            excludes += listOf("com.example.Annotation", "*Generated")
        }
    }

    instrumentation {
        // set of test tasks names to exclude from instrumentation. The results of their execution will not be presented in the report
        excludeTasks += "dummy-tests"
    }

    htmlReport {
        // set to true to run koverHtmlReport task during the execution of the check task (if it exists) of the current project
        onCheck.set(true)

        // change report directory
        reportDir.set(layout.buildDirectory.dir("my-project-report/html-result"))
        overrideFilters {
            // override common class filter
            classes {
                // class inclusion rules
                includes += "xyz.blokkontrol.*"
                // override class exclusion rules
                excludes += listOf("com.example2.subpackage.*")
            }
            // override common annotation filter for HTML report (filtering will take place only by the annotations specified here)
            annotations {
                excludes += listOf("com.example2.Annotation")
            }
        }
    }

    verify {
        // set to true to run koverVerify task during the execution of the check task (if it exists) of the current project
        onCheck.set(true)

        // add verification rule
        rule {
            // set to false to disable rule checking
            isEnabled = true

            // custom name for the rule
            name = "General Koverage"

            // specify by which entity the code for separate coverage evaluation will be grouped
            target = kotlinx.kover.api.VerificationTarget.ALL

            // override common class filter
            overrideClassFilter {
                // override class inclusion rules
                includes += "com.example.verify.*"

                // override class exclusion rules
                excludes += listOf("com.example.verify.subpackage.*")
            }

            // override common annotation filter (filtering will take place only by the annotations specified here)
            overrideAnnotationFilter {
                // declarations marked only by these annotations will be excluded from this rule
                excludes += "*verify.*Generated"
            }

            // add rule bound
            bound {
                minValue = 99
                maxValue = 100

                // change coverage metric to evaluate (LINE, INSTRUCTION, BRANCH)
                counter = kotlinx.kover.api.CounterType.LINE

                // change counter value (COVERED_COUNT, MISSED_COUNT, COVERED_PERCENTAGE, MISSED_PERCENTAGE)
                valueType = kotlinx.kover.api.VerificationValueType.COVERED_PERCENTAGE
            }
        }
    }
}